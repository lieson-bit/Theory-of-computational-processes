# ЛАБОРАТОРНАЯ РАБОТА №4  
## ПОСТРОЕНИЕ КОНЕЧНОГО АВТОМАТА МИЛИ ПО РЕГУЛЯРНОМУ ВЫРАЖЕНИЮ (x|d)<n|m>k(<a>x<b>)

---

## Введение

Лабораторная работа по дисциплине «Теория вычислительных процессов» направлена на практическое освоение методов построения конечных автоматов Мили для проверки слов на соответствие заданному регулярному выражению. Финальные автоматы применяются в широком спектре задач: от компиляции языков программирования и лексического анализа до проектирования цифровых схем и проверки корректности протоколов связи. Построение автомата Мили по произвольному регулярному выражению — важнейший практический навык, который закрепляет связь между формальной теорией автоматов и реальными задачами проектирования вычислительных систем.

В этой работе на примере выражения вида (x|d)<n|m>k(<a>x<b>) будет выполнен полный цикл: от анализа синтаксиса регулярного выражения, пошагового построения автомата Мили, до представления его в трёх классических формах: через матрицы переходов и выходов, через ориентированный граф (псевдографическую диаграмму переходов), а также через автоматную таблицу. Помимо чисто формальной части, в отчёте проанализированы основные теоретические моменты: сравнение автоматов Мили и Мура, методы минимизации финальных автоматов, а также современные подходы к визуализации и реализации автоматов в программируемых средах.

---

## Теоретические основы конечных автоматов и регулярных выражений

### Краткая характеристика конечных автоматов

**Конечный автомат** — это абстрактная математическая модель, описывающая поведение дискретной системы, которая находится в одном из фиксированного набора состояний и переходит из одного состояния в другое в ответ на входные сигналы. Автоматы активно применяются при распознавании языков, проектировании цифровых устройств, построении лексических анализаторов (сканеров), а также в области робототехники и управления процессами.

Классическим примером детерминированного конечного автомата (ДКА) является устройство, которое по заданному входному слову проверяет его на принадлежность определённому языку. Основными компонентами такого автомата являются алфавит входных символов, множество состояний, функция переходов, начальное состояние и (если это автомат Мура или автомат распознавания) множество финальных состояний.

### Особенности автомата Мили

**Автомат Мили** — разновидность конечного автомата, в котором выход определяется не только текущим состоянием, но и входным символом. Формально автомат Мили можно представить в виде шестёрки:

\[
M = (Q, Σ, Δ, δ, λ, q_0)
\]

где:

- **Q** — конечное множество состояний,
- **Σ** — конечный алфавит входных символов,
- **Δ** — конечный алфавит выходных символов,
- **δ: Q × Σ → Q** — функция переходов,
- **λ: Q × Σ → Δ** — функция выходов,
- **q₀** — начальное состояние.

Особое преимущество автомата Мили по сравнению с автоматом Мура заключается в том, что его реакция на входной сигнал может быть мгновенной, поскольку выход формируется на каждом переходе. Это особенно важно для задач, где важен не только финальный, но и промежуточный результат обработки входной последовательности.

---

## Формализация и разбор регулярного выражения (x|d)<n|m>k(<a>x<b>)

### Интерпретация конструкции (x|d)<n|m>k(<a>x<b>)

Первым шагом при проектировании автомата Мили по заданному регулярному выражению является чёткое определение синтаксиса — какие слова должна распознавать (или не распознавать) автомат. Разберём регулярное выражение по частям:

- **(x|d)** — символ x или d;
- **<n|m>** — n раз x или m раз d (вариативность числа повторов);
- **k** — дополнительное ограничение или количество повторов всей конструкции;
- **(<a>x<b>)** — секция, в которой встречаются символы a, x, затем b.

Рассмотрим наиболее вероятную интерпретацию записи **(x|d)<n|m>**:  
Она означает, что мы рассматриваем слова, в которых либо x повторяется n раз, либо d повторяется m раз.  
Параметр **k** может означать повторения всей конструкции (x|d)<n|m>, т.е. [xⁿ|dᵐ]^k, а затем добавляется хвост (<a>x<b>), т.е. последовательность из a, x, b.

**Пример для конкретных n, m, k**:  
Пусть n=2, m=3, k=1  
Множество допустимых слов: строка вида xxaxb или dddaxb

В отчёте ниже будет взят именно такой частный случай для конкретного построения автомата, поскольку параметризация n, m, k слишком громоздка для ручной реализации, но добавлено пояснение о генерализации на большие значения.

### Синтаксическое расширение и разбор формального языка

Язык, заданный выражением (x|d)<n|m>k(<a>x<b>), формирует конечное множество строк, каждая из которых начинается либо с n повторов x, либо с m повторов d, причём таких групп k штук. За ними обязательно следует последовательность символов a, x, b.

Формально язык L можно описать как:

\[
L = \{
w = z_1 z_2 ... z_k~ a x b~|~\forall i \in [1,k]: z_i = x^n~\textrm{или}~d^m
\}
\]

где n, m, k — натуральные числа.

В реальной лабораторной задаче зачастую используются небольшие значения n, m, k (например, n=2, m=3, k=1) для компактности автомата и наглядности построения.

---

## Построение автомата Мили по регулярному выражению

### Общая стратегия синтеза автомата

Построение автомата для заданного регулярного выражения включает следующие базовые этапы:

1. **Разбор шаблонов регулярного выражения на примитивные конструкции** (символ или цепочка символов, альтернативы, многократные повторения);
2. **Построение простейших автоматов для элементарных выражений** (например, отдельный автомат для xⁿ, отдельный — для dᵐ);
3. **Объединение автоматов с помощью операций объединения (альтернатива), конкатенации, повторения**;
4. **Встраивание секции (<a>x<b>) в конец последовательности**;
5. **Редукция и минимизация автомата** (при необходимости).

Для выражения (x|d)<n|m>k(<a>x<b>) алгоритм будет следующим:

- Построить автомат, допускающий последовательность из n раз x или m раз d, и повторить такую группу k раз подряд;
- Затем присоединить автомат, допускающий строго последовательность a, затем x, затем b;
- Завершить автомат корректным финальным состоянием.  

### Реализация для конкретного случая (n=2, m=3, k=1)

Для полноты понимания рассмотрим случай, когда n=2, m=3, k=1. Распознаются слова либо xxaxb, либо dddaxb. Эти слова имеют постоянную длину, что позволяет построить конечный (детерминированный) автомат минимального размера.

#### Определение входного алфавита

\[
Σ = \{ x, d, a, b \}
\]

#### Описание последовательностей

- xxaxb: x, x, a, x, b
- dddaxb: d, d, d, a, x, b

#### Возможные состояния автомата

Пусть состояния будут отражать текущую позицию в шаблоне, определяя сколько символов x или d уже считано, и в какой ветви шаблона находится автомат.

Рассмотрим следующую схему состояний:
- S0 — начальное состояние
- S1 — после прочтения x₁ (1-й x)
- S2 — после x₁x₂ (2-й x)
- S3 — после d₁ (1-й d)
- S4 — после d₁d₂ (2-й d)
- S5 — после d₁d₂d₃ (3-й d)
- S6 — после х₁x₂a (2 x и a)
- S7 — после d₁d₂d₃ a
- S8 — после х₁x₂a x или ddd a x
- S9 — после х₁x₂a x b или ddd a x b (финальное)

Это даёт детерминированную структуру переходов практически без недетерминизма.

---

## Матрицы переходов и выходов автомата Мили

### Формирование матрицы переходов

**Матрица переходов** описывает для каждого состояния и входного символа следующее состояние автомата.

В качестве выходного алфавита можно использовать, например, символы 1/0 для индикации того, допустимо ли текущее пройденное слово (1 — допустимо, 0 — недопустимо/в процессе) или иной необходимый код.

#### Матрица переходов (δ):

| Состояние | x   | d   | a   | b   |
|-----------|-----|-----|-----|-----|
| S0        | S1  | S3  | —   | —   |
| S1        | S2  | —   | —   | —   |
| S2        | —   | —   | S6  | —   |
| S3        | —   | S4  | —   | —   |
| S4        | —   | S5  | —   | —   |
| S5        | —   | —   | S7  | —   |
| S6        | S8  | —   | —   | —   |
| S7        | S8  | —   | —   | —   |
| S8        | —   | —   | —   | S9  |
| S9        | —   | —   | —   | —   |

##### Примечания:

— (тире) означает, что для данного символа из этого состояния нет перехода: такой путь не допускается в языке.

### Формирование матрицы выходов

Поскольку автомат Мили формирует выход на переходе, а не в состоянии (в отличие от автомата Мура), функция выхода λ определяется для каждой пары (состояние, вход).

**Матрица выходов (λ):**

| Состояние | x   | d   | a   | b   |
|-----------|-----|-----|-----|-----|
| S0        | 0   | 0   | —   | —   |
| S1        | 0   | —   | —   | —   |
| S2        | —   | —   | 0   | —   |
| S3        | —   | 0   | —   | —   |
| S4        | —   | 0   | —   | —   |
| S5        | —   | —   | 0   | —   |
| S6        | 0   | —   | —   | —   |
| S7        | 0   | —   | —   | —   |
| S8        | —   | —   | —   | 1   |
| S9        | —   | —   | —   | —   |

Выход «1» производится только при необходимости отмечать, что слово завершено корректно, а на всех других переходах — «0». Альтернативно, можно настроить выходы под задачу (например, выводить значащие символы, идентифицировать ошибку и др.).

#### Интерпретация матриц

Матрицы переходов и выходов позволяют удобно анализировать работу автомата, обеспечивают компактное описание для последующего машинного моделирования, а также могут быть использованы для быстрой генерации кода в различных языках программирования.

---

## Диаграмма переходов (псевдографика, текстовое описание)

Текстовое представление переходов автомата удобно в учебных целях и для первичной отладки.

**Псевдографическая схема (текстовое описание):**

- S0 →(x/0) S1  
- S0 →(d/0) S3
- S1 →(x/0) S2
- S2 →(a/0) S6
- S3 →(d/0) S4
- S4 →(d/0) S5
- S5 →(a/0) S7
- S6 →(x/0) S8
- S7 →(x/0) S8
- S8 →(b/1) S9

Финальным считается только состояние S9 (или по выходу «1»). Переход включён только если допускается в языке.

**Описание перехода**: на каждом шаге автомат находится в одном из состояний. Если входной символ не допускает перехода из текущего состояния — автомат (моделируемый как строгий ДКА) переходит в неявное ловушечное состояние (обычно не изображается на диаграмме внутри отчёта).

---

## Автоматная матрица (таблица переходов и выходов)

**Автоматная матрица** объединяет переходы и выходы в одну компактную таблицу, где каждая клетка указывает, к какому состоянию переходит автомат и какой выход производится на данном переходе.

| Состояние | x        | d        | a        | b        |
|-----------|----------|----------|----------|----------|
| S0        | S1/0     | S3/0     | —        | —        |
| S1        | S2/0     | —        | —        | —        |
| S2        | —        | —        | S6/0     | —        |
| S3        | —        | S4/0     | —        | —        |
| S4        | —        | S5/0     | —        | —        |
| S5        | —        | —        | S7/0     | —        |
| S6        | S8/0     | —        | —        | —        |
| S7        | S8/0     | —        | —        | —        |
| S8        | —        | —        | —        | S9/1     |
| S9        | —        | —        | —        | —        |

**Объяснение структуры:**
Каждая клетка типа Sx/S, где Sx — следующее состояние, S — выход автомата при данном переходе. Пустая клетка (—) означает отсутствие разрешённого перехода.

---

## Анализ и пояснение работы автомата на примерах

В целях демонстрации корректности работы полученного автомата рассмотрим последовательную обработку допустимых и недопустимых слов.

### Пример допустимого слова: xxaxb

1. S0, x → S1 (выход 0)
2. S1, x → S2 (выход 0)
3. S2, a → S6 (выход 0)
4. S6, x → S8 (выход 0)
5. S8, b → S9 (выход 1 — слово завершено корректно)

### Пример допустимого слова: dddaxb

1. S0, d → S3 (0)
2. S3, d → S4 (0)
3. S4, d → S5 (0)
4. S5, a → S7 (0)
5. S7, x → S8 (0)
6. S8, b → S9 (1 — завершено)

### Пример недопустимого слова: xdxaxb

1. S0, x → S1 (0)
2. S1, d — нет перехода, автомат заходит в ловушку, слово отвергается.

Таким образом, автомат строго проверяет структуру слова на соответствие заданному регулярному выражению — допускает только те цепочки, где после k последовательностей (xⁿ | dᵐ) обязательно встречается а, затем x, затем b.

---

## Краткое сравнение автоматов Мили и Мура

Формальные различия между автоматами Мили и Мура заключаются в способе формирования выходных сигналов:

- **Автомат Мили**: выход зависит как от текущего состояния, так и от входного символа; это позволяет генерировать выход сразу при обработке нового входа, часто делая такие автоматы компактнее и эффективнее в реальных задачах.
- **Автомат Мура**: выход зависит только от состояния, формируется после перехода; обычно такие автоматы чуть проще реализуются в аппаратуре, но могут требовать больше состояний для равной функции.

Применительно к данному конкретному случаю автомат Мили позволяет сократить количество состояний и сделать, к примеру, детектирование ошибки на любом неверном символе мгновенным по выходному сигналу, а не только после финального состояния.

---

## Минимизация конечных автоматов Мили

Минимизация — это процесс сведения автомата к эквивалентному автомату с минимальным числом состояний. Для автоматов Мили процедуру минимизации проводят так же, как и для ДКА: состояниям строят эквивалентные классы по неразличимости относительно распознаваемого языка и выходной функции.

В нашем простом примере минимизация не даст существенного эффекта, поскольку автомат построен практически минимальным образом. Однако при больших n, m, k эта процедура критична: она снижает количество состояний экспоненциально при росте числа повторов и вложенности шаблона.

Применение стандартного алгоритма минимизации (например, алгоритма Хопкрофта) может быть затруднено, если автомат построен с учётом функции выхода — в этом случае эквивалентными считаются только те состояния, которые приводят к идентичным выходным результатам на всех допустимых входных цепочках.

---

## Детерминизация: построение ДКА для автомата Мили

Часто при построении автомата по регулярному выражению на первом этапе проектируют недетерминированный КА (НКА), а затем осуществляют детерминизацию — преобразование в ДКА. Для автоматов типа Мили процесс аналогичен, однако требуется сохранять согласованность с функцией выходов.

Процесс детерминизации включает:

1. Построение множеств состояний для каждого возможного подмножества исходных состояний НКА;
2. Формирование функций переходов и выходов для этих объединённых состояний;
3. Отбрасывание недостижимых состояний и повторная минимизация автомата.

Для регулярных выражений, не содержащих ε-переходов, процесс детерминизации упрощается.

---

## Примеры лабораторных работ, оформление и современные инструменты моделирования

### Структура и оформление лабораторной работы

В большинстве вузов отчёт по лабораторной работе должен включать следующие элементы:

- Цель и задачи работы;
- Теоретические основы (введение в тему);
- Исходные данные (регулярное выражение и параметры);
- Подробное поэтапное построение автомата: словесное описание, матрицы, псевдографика;
- Анализ корректности работы автомата;
- Сравнительный анализ с другими типами автоматов;
- Заключение (выводы и итоги).

Таблицы должны быть читаемы, разметка — однозначная, схемы и диаграммы желательно сопровождать поясняющими подписями.

### Современные средства визуализации автоматов

Визуализация конечных автоматов реализуется с помощью различных инструментов: от простых графических редакторов до специализированных программных сред (например, JFLAP, Graphviz, Stateflow, FAdo и др.).

**JFLAP** — образовательная среда, позволяющая “рисовать” и симулировать автоматы разных типов;  
**Graphviz** — универсальный инструмент для автоматического построения диаграмм по текстовому описанию;  
**Stateflow** (Matlab/Simulink) — инструмент для промышленных задач, поддерживает автоматы Мили;  
**FAdo** — Python-библиотека для символьной работы с автоматами.

Результаты, получаемые такими средствами, могут быть интегрированы в отчёт при необходимости.

---

## Модификация и масштабирование автомата под произвольные n, m, k

Построенный для случая n=2, m=3, k=1 автомат можно масштабировать на большие значения параметров — рост числа состояний будет линейным по n, m, k. Для каждого k формируется “группа” состояний, последовательно подключающихся к блоку (<a>x<b>).

Общая формула числа состояний:

\[
|Q| = k \cdot (n + m) + (дополнительные~состояния~для~<a>x<b>)
\]

Но при больших k автомат становится слишком громоздким для ручного построения — в этих случаях применяются алгоритмы автоматической генерации ДКА по регулярному выражению.

---

## Практическая значимость и основы реализации

Понимание принципов построения конечных автоматов важно как для теоретической информатики, так и для инженерной практики. Автоматы Мили лежат в основе синтеза цифровых устройств, диаграмм управления процессами, лексических анализаторов, контроллеров протоколов и проч.

Результаты построения автомата Мили непосредственно могут быть преобразованы в код на языках С/С++, VHDL, Verilog и др., под автоматическое или ручное управление. Особенно актуальна тема автоматов для FPGA-разработки: модель автомата трансформируется в конечную программу для микросхем, управляющую логикой устройства на уровне аппаратуры.

---

## Заключение

В рамках данной лабораторной работы был произведён полный цикл построения и анализа конечного автомата Мили по регулярному выражению (x|d)<n|m>k(<a>x<b>). Выполнены формальный разбор задания, выборка допустимых слов, построение матрицы переходов и выходов, составлена автоматная матрица, выполнено псевдографическое описание диаграммы перехода. Кроме того, разобраны вопросы минимизации, строгое сравнение с автоматом Мура и освещены стандарты оформления лабораторной работы.

Построение конечного автомата по регулярному выражению закрепляет связь между формальными понятиями и их инженерным применением. Этот навык критически необходим для будущих специалистов IT и схемотехники, а эффективность синтеза, сокращения числа состояний и быстрая визуализация — база профессионального роста. 

Для более сложных шаблонов или параметров рекомендуется использовать программные средства автоматического синтеза и визуализации автоматов.

---